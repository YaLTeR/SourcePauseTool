// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENTUTILS_FB_ENT_H_
#define FLATBUFFERS_GENERATED_ENTUTILS_FB_ENT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "math_generated.h"

namespace fb {
namespace ent {

struct CBaseHandle;

struct CBaseTrace;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) CBaseHandle FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t val_;

 public:
  struct Traits;
  CBaseHandle()
      : val_(0) {
  }
  CBaseHandle(uint32_t _val)
      : val_(::flatbuffers::EndianScalar(_val)) {
  }
  uint32_t val() const {
    return ::flatbuffers::EndianScalar(val_);
  }
};
FLATBUFFERS_STRUCT_END(CBaseHandle, 4);

struct CBaseHandle::Traits {
  using type = CBaseHandle;
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) CBaseTrace FLATBUFFERS_FINAL_CLASS {
 private:
  fb::math::Vector3 start_pos_;
  fb::math::Vector3 end_pos_;
  fb::math::VPlane impact_plane_;
  float fraction_;
  int32_t contents_;
  uint16_t displacement_flags_;
  uint8_t all_solid_;
  uint8_t start_solid_;

 public:
  struct Traits;
  CBaseTrace()
      : start_pos_(),
        end_pos_(),
        impact_plane_(),
        fraction_(0),
        contents_(0),
        displacement_flags_(0),
        all_solid_(0),
        start_solid_(0) {
  }
  CBaseTrace(const fb::math::Vector3 &_start_pos, const fb::math::Vector3 &_end_pos, const fb::math::VPlane &_impact_plane, float _fraction, int32_t _contents, uint16_t _displacement_flags, uint8_t _all_solid, uint8_t _start_solid)
      : start_pos_(_start_pos),
        end_pos_(_end_pos),
        impact_plane_(_impact_plane),
        fraction_(::flatbuffers::EndianScalar(_fraction)),
        contents_(::flatbuffers::EndianScalar(_contents)),
        displacement_flags_(::flatbuffers::EndianScalar(_displacement_flags)),
        all_solid_(::flatbuffers::EndianScalar(_all_solid)),
        start_solid_(::flatbuffers::EndianScalar(_start_solid)) {
  }
  const fb::math::Vector3 &start_pos() const {
    return start_pos_;
  }
  const fb::math::Vector3 &end_pos() const {
    return end_pos_;
  }
  const fb::math::VPlane &impact_plane() const {
    return impact_plane_;
  }
  float fraction() const {
    return ::flatbuffers::EndianScalar(fraction_);
  }
  int32_t contents() const {
    return ::flatbuffers::EndianScalar(contents_);
  }
  uint16_t displacement_flags() const {
    return ::flatbuffers::EndianScalar(displacement_flags_);
  }
  uint8_t all_solid() const {
    return ::flatbuffers::EndianScalar(all_solid_);
  }
  uint8_t start_solid() const {
    return ::flatbuffers::EndianScalar(start_solid_);
  }
};
FLATBUFFERS_STRUCT_END(CBaseTrace, 52);

struct CBaseTrace::Traits {
  using type = CBaseTrace;
};

}  // namespace ent
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_ENTUTILS_FB_ENT_H_
