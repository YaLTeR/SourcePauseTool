// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MATH_FB_MATH_H_
#define FLATBUFFERS_GENERATED_MATH_FB_MATH_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace math {

struct Vector3;

struct QAngle;

struct Transform;

struct Aabb;

struct VPlane;

struct Color32;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vector3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  struct Traits;
  Vector3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vector3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vector3, 12);

struct Vector3::Traits {
  using type = Vector3;
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) QAngle FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  struct Traits;
  QAngle()
      : x_(0),
        y_(0),
        z_(0) {
  }
  QAngle(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(QAngle, 12);

struct QAngle::Traits {
  using type = QAngle;
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Transform FLATBUFFERS_FINAL_CLASS {
 private:
  fb::math::Vector3 pos_;
  fb::math::QAngle ang_;

 public:
  struct Traits;
  Transform()
      : pos_(),
        ang_() {
  }
  Transform(const fb::math::Vector3 &_pos, const fb::math::QAngle &_ang)
      : pos_(_pos),
        ang_(_ang) {
  }
  const fb::math::Vector3 &pos() const {
    return pos_;
  }
  const fb::math::QAngle &ang() const {
    return ang_;
  }
};
FLATBUFFERS_STRUCT_END(Transform, 24);

struct Transform::Traits {
  using type = Transform;
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Aabb FLATBUFFERS_FINAL_CLASS {
 private:
  fb::math::Vector3 mins_;
  fb::math::Vector3 maxs_;

 public:
  struct Traits;
  Aabb()
      : mins_(),
        maxs_() {
  }
  Aabb(const fb::math::Vector3 &_mins, const fb::math::Vector3 &_maxs)
      : mins_(_mins),
        maxs_(_maxs) {
  }
  const fb::math::Vector3 &mins() const {
    return mins_;
  }
  const fb::math::Vector3 &maxs() const {
    return maxs_;
  }
};
FLATBUFFERS_STRUCT_END(Aabb, 24);

struct Aabb::Traits {
  using type = Aabb;
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) VPlane FLATBUFFERS_FINAL_CLASS {
 private:
  fb::math::Vector3 normal_;
  float dist_;

 public:
  struct Traits;
  VPlane()
      : normal_(),
        dist_(0) {
  }
  VPlane(const fb::math::Vector3 &_normal, float _dist)
      : normal_(_normal),
        dist_(::flatbuffers::EndianScalar(_dist)) {
  }
  const fb::math::Vector3 &normal() const {
    return normal_;
  }
  float dist() const {
    return ::flatbuffers::EndianScalar(dist_);
  }
};
FLATBUFFERS_STRUCT_END(VPlane, 16);

struct VPlane::Traits {
  using type = VPlane;
};

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) Color32 FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t r_;
  uint8_t g_;
  uint8_t b_;
  uint8_t a_;

 public:
  struct Traits;
  Color32()
      : r_(0),
        g_(0),
        b_(0),
        a_(0) {
  }
  Color32(uint8_t _r, uint8_t _g, uint8_t _b, uint8_t _a)
      : r_(::flatbuffers::EndianScalar(_r)),
        g_(::flatbuffers::EndianScalar(_g)),
        b_(::flatbuffers::EndianScalar(_b)),
        a_(::flatbuffers::EndianScalar(_a)) {
  }
  uint8_t r() const {
    return ::flatbuffers::EndianScalar(r_);
  }
  uint8_t g() const {
    return ::flatbuffers::EndianScalar(g_);
  }
  uint8_t b() const {
    return ::flatbuffers::EndianScalar(b_);
  }
  uint8_t a() const {
    return ::flatbuffers::EndianScalar(a_);
  }
};
FLATBUFFERS_STRUCT_END(Color32, 4);

struct Color32::Traits {
  using type = Color32;
};

}  // namespace math
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_MATH_FB_MATH_H_
